// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExportResourceManager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211220081129_add_model")]
    partial class add_model
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.Authorization.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = "4d01b5d9-6458-4258-a03d-7852ac6c43a9",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2021, 12, 20, 15, 11, 29, 370, DateTimeKind.Local).AddTicks(1906),
                            IsDeleted = false,
                            Name = "application_admin"
                        },
                        new
                        {
                            Id = "4d01b5d9-6458-4258-a03d-7852ac6c43b8",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2021, 12, 20, 15, 11, 29, 370, DateTimeKind.Local).AddTicks(2368),
                            IsDeleted = false,
                            Name = "application_user"
                        });
                });

            modelBuilder.Entity("API.Models.Authorization.RolePermission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = "6afdd591-893c-476f-8a54-a78ca8def929",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2021, 12, 20, 15, 11, 29, 370, DateTimeKind.Local).AddTicks(4381),
                            IsDeleted = false,
                            Permission = 0,
                            RoleId = "4d01b5d9-6458-4258-a03d-7852ac6c43a9"
                        },
                        new
                        {
                            Id = "139321be-1d0c-4a5d-aa2f-c3ff02078666",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2021, 12, 20, 15, 11, 29, 370, DateTimeKind.Local).AddTicks(5045),
                            IsDeleted = false,
                            Permission = 100000000,
                            RoleId = "4d01b5d9-6458-4258-a03d-7852ac6c43a9"
                        },
                        new
                        {
                            Id = "96ec9a47-4dc6-491c-8278-12a7451520ba",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2021, 12, 20, 15, 11, 29, 370, DateTimeKind.Local).AddTicks(5052),
                            IsDeleted = false,
                            Permission = 200000000,
                            RoleId = "4d01b5d9-6458-4258-a03d-7852ac6c43a9"
                        },
                        new
                        {
                            Id = "d29bdbe3-60f7-49f0-9294-6b1db97f5907",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2021, 12, 20, 15, 11, 29, 370, DateTimeKind.Local).AddTicks(5055),
                            IsDeleted = false,
                            Permission = 300000000,
                            RoleId = "4d01b5d9-6458-4258-a03d-7852ac6c43a9"
                        },
                        new
                        {
                            Id = "98f00f47-476e-4285-a420-719091eab6da",
                            CreatedByUserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2021, 12, 20, 15, 11, 29, 370, DateTimeKind.Local).AddTicks(5058),
                            IsDeleted = false,
                            Permission = 0,
                            RoleId = "4d01b5d9-6458-4258-a03d-7852ac6c43b8"
                        });
                });

            modelBuilder.Entity("API.Models.Authorization.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            CreatedDate = new DateTime(2021, 12, 20, 15, 11, 29, 368, DateTimeKind.Local).AddTicks(9100),
                            IsDeleted = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("API.Models.Authorization.UserRestriction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRestriction");
                });

            modelBuilder.Entity("API.Models.Authorization.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = "92ad4f43-4be7-4fb8-909f-ced532c58461",
                            RoleId = "4d01b5d9-6458-4258-a03d-7852ac6c43a9",
                            CreatedDate = new DateTime(2021, 12, 20, 15, 11, 29, 370, DateTimeKind.Local).AddTicks(2990)
                        });
                });

            modelBuilder.Entity("ExportVideoManager.Models.ProcessingResource.EditResource", b =>
                {
                    b.Property<string>("IntergratedResourcesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrimordialResourcesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("EndTime")
                        .HasColumnType("bigint");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.HasKey("IntergratedResourcesId", "PrimordialResourcesId");

                    b.HasIndex("PrimordialResourcesId");

                    b.ToTable("EditResources");
                });

            modelBuilder.Entity("ExportVideoManager.Models.ProcessingResource.IntergratedResources", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditingSoftware")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ResourceFileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsedByUrls")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("IntergratedResources");
                });

            modelBuilder.Entity("ExportVideoManager.Models.ProcessingResource.PrimordialResources", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProvenOrigin")
                        .HasColumnType("bit");

                    b.Property<string>("ResourceFileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("PrimordialResources");
                });

            modelBuilder.Entity("API.Models.Authorization.Role", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.Authorization.RolePermission", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.Authorization.UserRestriction", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "User")
                        .WithMany("UserRestrictions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Authorization.UserRole", b =>
                {
                    b.HasOne("API.Models.Authorization.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Authorization.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExportVideoManager.Models.ProcessingResource.EditResource", b =>
                {
                    b.HasOne("ExportVideoManager.Models.ProcessingResource.IntergratedResources", "IntergratedResources")
                        .WithMany("EditResources")
                        .HasForeignKey("IntergratedResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExportVideoManager.Models.ProcessingResource.PrimordialResources", "PrimordialResources")
                        .WithMany("EditorResources")
                        .HasForeignKey("PrimordialResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IntergratedResources");

                    b.Navigation("PrimordialResources");
                });

            modelBuilder.Entity("ExportVideoManager.Models.ProcessingResource.IntergratedResources", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ExportVideoManager.Models.ProcessingResource.PrimordialResources", b =>
                {
                    b.HasOne("API.Models.Authorization.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("API.Models.Authorization.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("API.Models.Authorization.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.Authorization.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Models.Authorization.User", b =>
                {
                    b.Navigation("UserRestrictions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ExportVideoManager.Models.ProcessingResource.IntergratedResources", b =>
                {
                    b.Navigation("EditResources");
                });

            modelBuilder.Entity("ExportVideoManager.Models.ProcessingResource.PrimordialResources", b =>
                {
                    b.Navigation("EditorResources");
                });
#pragma warning restore 612, 618
        }
    }
}
